#!/usr/bin/env bash
_path=$(cd "${BASH_SOURCE[0]%/*}"; pwd)

. "$_path/../../lib/include.sh"

conf=$(cat "$_path/omnia.conf")
mapfile -t pairs < <(jq -r '.pairs|keys|.[]|select(. != "ETH/BTC")' <<<"$conf")

export SPIRE_CONFIG="$_path/_spire.json"
export OMNIA_CONFIG="$_path/_omnia.conf"
export OMNIA_SOURCE_PARALLEL=1
export OMNIA_DEBUG=1

startGeth

env | grep ETH_ >&2

jq \
  --arg from "$ETH_FROM" \
  --arg keys "$ETH_KEYSTORE" \
  '.ethereum *= {from:$from,keystore:$keys}
  |.feeds += [$from]' \
  "$_path/spire.json" \
> "$SPIRE_CONFIG"

# Deploy Median contracts

echo >&2 "# Deploy oracle contracts"
oracles=$(deploy-median \
  0x1f8fbe73820765677e68eb6e933dcb3c94c9b708 \
  "${pairs[@]}" \
  2>"${E2E_LOGS-.}/${E2E_TARGET-test}-deploy-median.out"
)

startLibp2p

echo >&2 "# Replay Spire messages"
jq -c '.[]' "$_path/spire-messages.json" \
  | spirePublishMessages

startSSB

echo >&2 "# Replay Scuttlebot messages"
jq -c '.[].value.content' "$_path/ssb-messages.json" \
  | ssbPublishMessages

# Update omnia config
for pair in "${pairs[@]}"; do
  address=$(jq -r --arg p $pair '.[$p]' <<<"$oracles")
  conf=$(
    jq --arg p $pair --arg a $address \
      '.pairs[$p] *= { oracle: $a, msgExpiration: 180000000000, oracleExpiration: 180000000000 }' \
      <<<"$conf"
  )
done
conf=$(jq --arg s $(ssbId) '.services.scuttlebotIdMap = {"0x1f8fbe73820765677e68eb6e933dcb3c94c9b708":$s}' <<<"$conf")
conf=$(jq '.ethereum.network = "http://127.0.0.1:8545"' <<<"$conf")
echo "$conf" > "$OMNIA_CONFIG"

echo >&2 "# HOME at $E2E_HOME"

startOmnia

echo >&2 "# Read oracle prices"
for pair in "${pairs[@]}"; do
  address=$(jq -r --arg p $pair '.[$p]' <<<"$oracles")
  rawStorage=$(seth storage $address 0x1)
  jq -n \
    --arg p $pair \
    --arg v $(seth --from-wei $(seth --to-dec ${rawStorage:34:32})) \
    '{($p):$v}'
done | jq -Ss add
